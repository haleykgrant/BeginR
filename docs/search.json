[
  {
    "objectID": "Sections/S3/Files.html",
    "href": "Sections/S3/Files.html",
    "title": "7  Understanding File Structures",
    "section": "",
    "text": "7.1 File Structure\nBefore we get to data import, we need to go over a brief overview of computer file structures and how R will look for data files on your computer.",
    "crumbs": [
      "Working with Data",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Understanding File Structures</span>"
    ]
  },
  {
    "objectID": "Sections/S3/Files.html#file-structure",
    "href": "Sections/S3/Files.html#file-structure",
    "title": "7  Understanding File Structures",
    "section": "",
    "text": "7.1.1 Files saved locally on your computer\nWhen you are working in R on your local computer and you want to import a data file into your R session for an analysis, you will need to tell R where it can find the data file. This is why I suggested creating a ‘Data’ folder in your class folder. If you save all of the data files for this class in that folder, you can always use the same general syntax for telling R where your file is.\nFor this tutorial, we are working on the web, so R doesn’t have access to the local files on your device. I have included all of the data files we will be using in this tutorial on a webpage that we can access online. You may need to change this code slightly to when running code for your assignments in this class to work with your computer’s file structure.\n\n\n7.1.2 Checking your working directory\nOne good idea when you start working on a new analysis is to make sure you know where within your computer’s file structure you are working so you can figure out how to access various files.\nWe can use the function getwd() to have R print out the path to the directory (folder) we are currently working in.\nTry running the code in this block:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nYou should see the output is:\n\n“/home/web_user”\n\nThis is because we are working in R on the web. This is telling us that we are in a sub-directory of the “home” directory called “web_user”. That is, “web_user” is a directory (folder) inside the larger directory (folder) called “home”. You read file paths from left to right.\n\nTry running this in your Console in RStudio on your computer, and you should see a file path that corresponds to the file structure on your computer.\n\n\n\n7.1.3 File paths\nFile paths are a way of specifying the location of a file within a computer’s file system. There are two kinds of file paths, absolute paths and relative paths. Both can be useful in different situations.\n\nAbsolute file paths are file paths that start at the root node of your computer (often starting with something like “C:” in Windows and “/Users/” in Unix-like operating systems like macOS). Absolute paths can get fairly long if files are contained within many levels of sub-directories.\nRelative file paths are paths that start at the current working directory, and are therefore often shorter than absolute paths.\n\nThe function we used above, getwd(), prints absolute paths, so we are currently working in the “web_user” sub-directory of the root directory called “home”. The image below is a visual representation of the file structure.\n\n\n\n7.1.4 List files in working directory\nTo check the files that exist in our current directory, we can use the function list.files() to print a list of all the files that are stored in the directory where we are currently working. If we just want to print the files in our working directory, we can run the function without giving it a file path and just leave the inside of the parentheses blank (this will assume you want to list the files in your current directory). We could also input a file path to the function.\nTry running the code in this block:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExercise:\n\n\n\nTry running the line of code above with but remove everything from inside the set of parentheses. Do you notice a difference?\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThere shouldn’t be any difference since we used the absolute path to the current working directory!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nThe output should look something like this:\n\n[1] “Data” “Rplots.pdf”\n\nThis tells us that there are 2 objects that we have access to in this directory:\n\nA folder called “Data”\n\nOne clue that it’s a folder instead of a file is that it doesn’t have a file extension (like “.pdf”) on the end\n\nA file called “Rplots.pdf”\n\nWe won’t be working with this file\n\n\nIf we want to see the files contained within the sub-folder “Data”, we can add this to the end of our absolute file path within the path argument:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nEquivalently, with Relative Path\n\n\n\n\n\nThis code will give us the same output as above:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nAlternatively, we could add an extra argument to the original code that allows us to print files within subdirectories recursively. This argument tells R to print the contents of any subfolders contained within our directory (stopping when there are no further nested folders).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAll of these tell us that within the sub-folder called “Data”, we have three files:\n\na file called “cdc_samp.csv”\na file called “census.rda”\na file called “dds.xlsx”\n\nThese are the data files that we will be working with in this tutorial.",
    "crumbs": [
      "Working with Data",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Understanding File Structures</span>"
    ]
  },
  {
    "objectID": "Sections/S3/Files.html#types-of-files",
    "href": "Sections/S3/Files.html#types-of-files",
    "title": "7  Understanding File Structures",
    "section": "7.2 Types of Files",
    "text": "7.2 Types of Files\nThe main types of files that we will work with in this class are:\n\n\n\n\n\n\n\n\n\nFile Type\nDescription\nFile Extension\n\n\n\n\nCSV files\nThis stands for “comma separated value”. These are files that have rows with entries separated by commas to indicate the different columns\n.csv\n\n\nExcel files\nFiles in Excel workbook/sheet format\n.xls or .xlsx\n\n\nR data files\nFiles with saved R objects\n.RData or .rda\n\n\n\nThe three files we will use today have the following names:\n\n“cdc_samp.csv” : a csv file with demographic data from the CDC\n“dds.xlsx” : an Excel file with data from the Department of Disability Services in California\n“census.rda”: an R data file with data from the US Census Bureau",
    "crumbs": [
      "Working with Data",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Understanding File Structures</span>"
    ]
  },
  {
    "objectID": "Sections/S1/ch1outline.html",
    "href": "Sections/S1/ch1outline.html",
    "title": "Outline",
    "section": "",
    "text": "This section was developed based on this resource. The goal is to make sure you have R and Rstudio installed on your computer and make sure you have a folder set up for this class to make your semester go smoother.\nThis section will help you set up your computer to use R. It wil be useful for you if you need to:\n\nInstall R on your computer\nInstall the RStudio IDE\nGet set up with R projects\n\nYou can skip this section if you’ve already done these things.",
    "crumbs": [
      "R Set Up",
      "Outline"
    ]
  },
  {
    "objectID": "Sections/S1/InstallR.html",
    "href": "Sections/S1/InstallR.html",
    "title": "1  Installing R",
    "section": "",
    "text": "If you need to download R, head over to the CRAN website to download R.\nIf you’ve already done this, we’ll move to the next step!",
    "crumbs": [
      "R Set Up",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installing R</span>"
    ]
  },
  {
    "objectID": "Sections/S1/RStudio.html",
    "href": "Sections/S1/RStudio.html",
    "title": "2  Installing RStudio",
    "section": "",
    "text": "2.1 Install RStudio",
    "crumbs": [
      "R Set Up",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Installing RStudio</span>"
    ]
  },
  {
    "objectID": "Sections/S1/RStudio.html#install-rstudio",
    "href": "Sections/S1/RStudio.html#install-rstudio",
    "title": "2  Installing RStudio",
    "section": "",
    "text": "2.1.1 How to install RStudio\nRStudio is an Integrated Development Environment (IDE) for R. What does that mean? Well, if you think of R as a language, which it is, you can think of RStudio as a program that helps you write and work in the language. RStudio makes programming in R much easier and I suggest that you use it!\n\nIf you need to download RStudio, head over to the RStudio website to download RStudio. There are also some helpful tutorials on this website!\nIf you’ve already done this, we’ll move to the next step!",
    "crumbs": [
      "R Set Up",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Installing RStudio</span>"
    ]
  },
  {
    "objectID": "Sections/S1/RProjects.html",
    "href": "Sections/S1/RProjects.html",
    "title": "3  R Projects",
    "section": "",
    "text": "3.1 R Projects\nR projects make it easy to keep files relating to the same content organized. I recommend making a folder and an R project for this class. This will allow you to keep all of your data files, notes, and homework code in one (organized) place on your computer.",
    "crumbs": [
      "R Set Up",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>R Projects</span>"
    ]
  },
  {
    "objectID": "Sections/S1/RProjects.html#r-projects",
    "href": "Sections/S1/RProjects.html#r-projects",
    "title": "3  R Projects",
    "section": "",
    "text": "3.1.1 Guide to RStudio IDE and R Projects\nBelow is a great video from RLadiesSydney. Watch the video for a description of the layout of the RStudio interface and a demonstration for how to create an R project on your computer.\n\n\n\n3.1.2 Making a New R Project\nMaking an R project is a great idea to keep files like data, code files, etc. together. I like to make a new R project for every new research project, class, outside project, etc. that I use R for.\nBy making a new project, you will help R find the files you need for your analyses and keep everything organized in one place. Go ahead and make an R project for this material on your own computer now!\nThat’s it! The next chapter will be about using data types, using functions, and downloading packages in R.",
    "crumbs": [
      "R Set Up",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>R Projects</span>"
    ]
  },
  {
    "objectID": "Sections/S2/ch2outline.html",
    "href": "Sections/S2/ch2outline.html",
    "title": "Outline",
    "section": "",
    "text": "In this section, you will learn about working with objects in R. In particular, this section will cover…\n\nR objects\nData types in R\nFunctions in R\nInstalling and using R packages",
    "crumbs": [
      "Intro to R Coding",
      "Outline"
    ]
  },
  {
    "objectID": "Sections/S2/Objects.html",
    "href": "Sections/S2/Objects.html",
    "title": "4  R Objects",
    "section": "",
    "text": "4.1 Numeric Data\nWe’ve already worked with some numeric variables (x and y above). These are special types of objects that we can perform typical mathematical operations on.\nBelow I’m creating a new object called x_numeric that stores the number 5.",
    "crumbs": [
      "Intro to R Coding",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>R Objects</span>"
    ]
  },
  {
    "objectID": "Sections/S2/Objects.html#numeric-data",
    "href": "Sections/S2/Objects.html#numeric-data",
    "title": "4  R Objects",
    "section": "",
    "text": "Please enable JavaScript to experience the dynamic code cell content on this page.\n\n4.1.1 Addition, subtraction, multiplication, division\nIn the previous section, we defined two numeric objects, x and y, that stored the numbers 2 and 3, respectively. We will work with these objects to show how numeric objects work in R. Make sure you’ve run the code chunk above defining these two objects.\nWe can do simple arithmetic like adding, subtracting, multiplying, and dividing, using the symbols +, -, *, and /, respectively.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExercise:\n\n\n\nI’ve shown addition and multiplication below, see if you can do subtraction and division!\n\n\n\n\n\n\nSolution\n\n\n\n\n\nHere’s how to do subtraction and division\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n4.1.2 Powers\nWe can take powers using the ^ operator:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n4.1.2.1 Logarithm/Exponent\nTo take the natural (base e) logarithm of a numeric object we can use the log() function. The inverse of this function is exp(), which calculates e^x :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n4.1.3 Saving a new variable z\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Intro to R Coding",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>R Objects</span>"
    ]
  },
  {
    "objectID": "Sections/S2/Objects.html#character-data",
    "href": "Sections/S2/Objects.html#character-data",
    "title": "4  R Objects",
    "section": "4.2 Character Data",
    "text": "4.2 Character Data\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThis is a character. Even though it looks like a number, the quotation marks tell R that we don’t want to treat this as the number 5. For example, maybe this is and identifier for hospital number 5 in a study. In this case, we probably don’t want to do typical calculations as if this was the number 5.\nFor example, see what happens when you try to multiply x_character by 2.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n4.2.0.1 Error messages\nOh no! You should see the following error message:\n\nError: non-numeric argument to binary operator\n\nThis is R’s way of telling you that you’re trying to apply a function that requires a number to an object that isn’t a number. R gives helpful error messages like this when you try to run code that doesn’t work. Sometimes the language R uses is hard to understand, but you can always ask me or a TA what the error means, or search the error on Google!\n\n\n\n\n\n\nExercise:\n\n\n\nIf you change x_character to x_numeric in the code above, you should see it works just fine! Try it out yourself!",
    "crumbs": [
      "Intro to R Coding",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>R Objects</span>"
    ]
  },
  {
    "objectID": "Sections/S2/Objects.html#vectors",
    "href": "Sections/S2/Objects.html#vectors",
    "title": "4  R Objects",
    "section": "4.3 Vectors",
    "text": "4.3 Vectors\nWe don’t have to save values in R individually. We can also save a bunch of values (numbers, characters, factors, etc.) together in something called a vector.\nWe can make this type of R object using the c() function (this stands for “concatenate”) to put a bunch of values together in a vector, separated by a comma. The values within a vector can be any type (numeric, character, logical, factor, etc.), but they must all be the same type, i.e. all numeric, all character, etc. (except for missing values).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can do lots of fun stuff in R with vectors. For example, we can multiply every entry of a numeric vector by 2, take the mean, sum, or standard deviation of a numeric vector, show the unique entries of the vector, and much more!\n\n4.3.1 Multiply by 2\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n4.3.2 Take the mean\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n4.3.3 Take the sum\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n4.3.4 Take the standard deviation\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n4.3.5 Show the unique values\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n4.3.6 Print the length of the vector\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExercise:\n\n\n\nThe goal of the following line of code is to find and print the maximum value of the vector x_vector, but it has an error. Can you find the mistake in the code? See if you can figure out how to fix it so the code returns the correct answer (the maximum value in the vector is 5).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe problem with the code above is that I accidentally included the name of the vector object (x_vector) in quotation marks (\"x_vector\"). If you include the name of an object in quotation marks, R will just think it’s a character string and not the name of a saved object in the directory. If you remove the quotation marks, the code should work as expected!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Intro to R Coding",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>R Objects</span>"
    ]
  },
  {
    "objectID": "Sections/S2/Objects.html#factor-data",
    "href": "Sections/S2/Objects.html#factor-data",
    "title": "4  R Objects",
    "section": "4.4 Factor Data",
    "text": "4.4 Factor Data\nFactor variables are categorical variables that can either be numeric or character strings. Sometimes we get data that are coded with numbers even though the underlying variable is categorical. For example, we often code No/Yes variables as 0/1. Or maybe we have three levels of health insurance status: public, private, and uninsured. We may label these categories as 1, 2, and 3, but these numbers are just used for convenience, not because “private insurance” has anything to do with the number 2.\nIn these cases, it can be helpful to convert variables to factors. Turning the variable into a factor means R will treat the variable as categorical rather than as a number. We also have the option to choose an order for the variable and we can give the variables nicer, more readable labels, which can both come in handy when making plots and tables from the data. We can accomplish these two tasks using the levels and labels arguments, respectively.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere we can see that x_factor is a vector of factor variables. Now instead of showing up as numbers 1 through 5, we see the labels from the Likert scale. Our original vector was 1, 2, 3, 4, 5, 2, 4 which correspond to: Strongly Agree, Agree, Neutral, Disagree, Strongly Disagree, Agree, Disagree. This is the order that is showing up in x_factor. We can also see all possible levels printed when we print our vector of factor variables.",
    "crumbs": [
      "Intro to R Coding",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>R Objects</span>"
    ]
  },
  {
    "objectID": "Sections/S2/Objects.html#logical-data",
    "href": "Sections/S2/Objects.html#logical-data",
    "title": "4  R Objects",
    "section": "4.5 Logical Data",
    "text": "4.5 Logical Data\nR has another type of data called “logical” values. These are binary TRUE/FALSE (can also abbreviate with T/F) that let you know if a statement is true or false. This can be really useful when we want to filter data. For example, if we want to filter data to everyone over the age of 50, we can use logical variables to check if the age variable is greater than 50.\nIn the example below we’ll make a new variable to tell us if x_numeric from above is equal to the number 5.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExercise:\n\n\n\nTry changing the value in the code above to check if x_numeric is equal to the number 4 to see how the value would change.\n\n\n\n\n\n\n\n\nNote: White spaces and case in character objects\n\n\n\nRecall that I mentioned above that adding extra white spaces in R generally doesn’t impact your code (but can help with readability). One instance where white spaces do matter is inside characters. Run the code below to see an example of this:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNotice here that the statement is false, these two characters are not equal (because one has an extra space).\nR is also case-sensitive:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n\nOther Inequalities/Operators\n\n\n\n\n\nWe saw above that the == operator is R’s way of checking if an object is equal to some value. There some other useful operators such as:\n\n&gt;: “greater than”\n&gt;=: “greater than or equal to”\n&lt;: “less than”\n&lt;=: “less than or equal to”\n%in%: “is an element of” (this will be helpful when we get to vectors later)\n\nGo ahead and play around with the code below to try different operators:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Intro to R Coding",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>R Objects</span>"
    ]
  },
  {
    "objectID": "Sections/S2/Objects.html#missing-values",
    "href": "Sections/S2/Objects.html#missing-values",
    "title": "4  R Objects",
    "section": "4.6 Missing Values",
    "text": "4.6 Missing Values\nR has a special way of denoting missing values. In R, these show up as NA values. For example, if you have a data set with 100 individuals’ height, weight, and age, if you weren’t able to get the values measured for some of the individuals, those values should show up as NA values to indicate that they are missing.\nNote: this is different from \"NA\" the character. R will change the text color of NA when you type it in your code to show that this is a special kind of variable.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExercise:\n\n\n\nTry multiplying the x_missing variable by 2 and see what happens.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nGenerally any kind of functions applied to missing values return another NA value unless the function has a special way of handling missing values.\n\n\n\n4.6.1 The is.na() function\nThere is a special function in R that can help you check if a value is a missing value. This function is is.na(). To see how it works, try running the code below:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Intro to R Coding",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>R Objects</span>"
    ]
  },
  {
    "objectID": "Sections/S2/Functions.html",
    "href": "Sections/S2/Functions.html",
    "title": "5  R Functions",
    "section": "",
    "text": "We’ve already shown some examples of functions in R. You can think of R functions kind of like a recipe. You need to tell R what dish you want to make (the function) and give it some ingredients (called arguments), and then R will make the dish for you!\nFunctions in R all use the same general syntax:\n\nfunction_name(argument1 , argument2 , ...)\n\nwhere here the name of the function is function_name and the arguments for the function are passed to the function inside a set of parentheses. Some functions have no arguments, some have one, and some have many.\nFor example, the mean() function we used in the previous chapter is a built-in R function that takes a vector of numbers (it can also take a vector of logical values or some more advanced data types like dates) and returns the mean (average) value by adding up all of the entries in the vector and dividing by the length. Functions in R are really helpful because it means we don’t have to write out the full code ourselves.\nFor example, both lines of code below do the same thing, but one is a lot easier (imagine if the vector had been even longer)!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nNote: Argument Names\n\n\n\n\n\nSometimes the functions we use will take multiple arguments, and sometimes they only need one. With all R functions, the arguments are given names. For example, technically the argument name for the function mean() is called x, which is just a placeholder for any R objects that you can calculate the mean of. If we wanted to be really technical, we could have used the following line of code:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nI try to use argument names in functions that use multiple arguments, because if you don’t assign the inputs to specific argument names, R has to assume that you’ve put the input in a specific order. Sometimes, if I’m only using the most basic argument (like x in the mean() function), I may forget to or choose not to include the name of the argument to make the code simpler.\nIf you ever need help figuring out what arguments a certain function in R takes, you can use the ‘Help’ tab in R Studio (in the bottom right quadrant) or type ?function_name in your R Console (for example, ?mean). This will open a documentation page for the function and should include information about the argument names and the types of objects can be used as input for the function.",
    "crumbs": [
      "Intro to R Coding",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>R Functions</span>"
    ]
  },
  {
    "objectID": "Sections/S2/Packages.html",
    "href": "Sections/S2/Packages.html",
    "title": "6  R Packages",
    "section": "",
    "text": "6.1 Installing R Packages",
    "crumbs": [
      "Intro to R Coding",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>R Packages</span>"
    ]
  },
  {
    "objectID": "Sections/S2/Packages.html#installing-r-packages",
    "href": "Sections/S2/Packages.html#installing-r-packages",
    "title": "6  R Packages",
    "section": "",
    "text": "Note: Installing packages\n\n\n\nYou should generally only need to install a package one time on your computer. Installing packages is just like downloading any other piece of software on your computer; once you’ve downloaded it once, you have it on your computer unless you delete it.\nInstalling packages is different from loading packages, which we’ll get to next.",
    "crumbs": [
      "Intro to R Coding",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>R Packages</span>"
    ]
  },
  {
    "objectID": "Sections/S2/Packages.html#loading-packages",
    "href": "Sections/S2/Packages.html#loading-packages",
    "title": "6  R Packages",
    "section": "6.2 Loading Packages",
    "text": "6.2 Loading Packages\nJust because you installed an R package once, doesn’t mean you want to use it for every task you do in R. Because of this, R will only automatically load a small set of default packages when you launch a new session. Other than the small set of default packages, you’ll need to tell it if you want to use any additional packages. To load a library that isn’t loaded by default, we use the following code:\n\nlibrary(package_name)\n\n\n\n\n\n\n\nNote: Argument Names (continued)\n\n\n\n\n\nJust to reiterate the previous point about argument names, technically the argument name used here in the library() function is called package. This is assumed to be the first argument, and we generally won’t utilize any of the other arguments, which allow you to customize how you want to load a library and if you want anything printed when you load it, etc. But again, we could utilize the argument name like so:\nlibrary(package =  package_name)\n\n\n\nThink of installing and loading R packages as similar to using the Microsoft Word application on your computer. Once you have Microsoft Word installed on your computer, you have the software available to you. But that doesn’t mean Word is always running on your computer. In order to use Word, you have to open the application. This is essentially what we are doing when we load a library–we’re opening it up so we can use it.\n\n\n\n\n\n\nNote: loading packages\n\n\n\n\n\nAnother reason we don’t automatically load all of the packages we’ve ever installed on our computer is because sometimes different packages have functions that are named the same thing (this is because R is open-source)! When this happens, it can be frustrating to try to figure out which version of the function R is using and requires extra code to tell R which version of the function you want to use. To avoid this it is best practice to only load the packages you currently need.\n\n\n\n\n\n\n\n\n\nLoading uninstalled packages\n\n\n\n\n\nRemember that you have to install an R package once before you ever use it. After you’ve installed it once, you don’t need to re-install it, you just need to load it into your session to have access to its contents.\nIf you ever run a line of code like this:\n\nlibrary(mypackage)\n\nand get an error message like this:\n\nError in library(mypackage) : there is no package called ‘mypackage’\n\nthis means you are trying to load a package you haven’t installed yet and you need to run install.packages(\"mypackage\") once first.",
    "crumbs": [
      "Intro to R Coding",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>R Packages</span>"
    ]
  },
  {
    "objectID": "Sections/S2/Packages.html#the-tidyverse-package",
    "href": "Sections/S2/Packages.html#the-tidyverse-package",
    "title": "6  R Packages",
    "section": "6.3 The tidyverse package",
    "text": "6.3 The tidyverse package\nThe R tidyverse package is a very useful suite of packages that make data manipulation and visualization clean and efficient. To see all of the packages included in the tidyverse package run the following code to print the names of all packages within the tidyverse suite:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n6.3.1 Error message\nOh no! We got another error message. You should see the following error:\n\nError: could not find function “tidyverse_packages”\n\nThis is R’s way of telling you that you’re trying to use a function that it doesn’t have access to. The tidyverse_packages() function comes from the tidyverse package. I have already installed the tidyverse for you in the setup of this tutorial, but I didn’t load it.\nTo give ourselves access to the functions from the tidyverse package, let’s add the line of code library(tidyverse) before the line of code in the chunk above. That should fix the problem.\n\n\n\n\n\n\nExercise:\n\n\n\nAdd the line of code library(tidyverse) before the line of code in the chunk above and try rerunning the code chunk.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n6.3.2 The pipe operator from the tidyverse\nOne of the unique functions provided by the tidyverse is called the “pipe operator.” The pipe operator looks like this: %&gt;%. The pipe operator is a way of stringing together a bunch of functions and the purpose is to make your code easier to read.\n\n\n\n\n\n\nNote: %&gt;% vs |&gt;\n\n\n\n\n\nRecent updates to R also let you use |&gt; as the pipe operator, but I’m old so I still use %&gt;% 🙂\n\n\n\nTo see an example of this, consider the following task:\nWe want to know how many unique values are contained in the vector x_vector.\nTo do this, we can start by having R tell us the unique values in x_vector using unique(x_vector). This will give us a vector of the unique values in x_vector. Then, we can print the length of the output of unique(x_vector) using the length() function. This will print out the number of entries in the vector of unique entries of x_vector.\nTo do this, we can use multiple functions simultaneously by nesting the parentheses:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNotice how the order of operations was:\n\nStart with your input x_vector\nDetermine the unique values of x_vector\nCalculate length of unique(x_vector)\n\nHowever, reading left-to-right we see the last step first. This can get particularly confusing when we want to apply multiple sequential functions to the same object in R. Imagine we had wanted to do 3 more functions! This would have read as:\n\nfunction3(function2(function1(length(unique(x_vector)))))\n\nThat’s a lot of parentheses and it’s hard to even figure out where the operation starts! The pipe operator can be helpful in these scenarios. Returning to our example, we can print the number of unique entries of x_vector as follows:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSee how the output is the same but the order of operations is much clearer in this example? It’s clear that we start with the object x_vector, which we then extract just the unique values from, then finally calculate the length of just the vector of unique values.\nIn the example above with an extra 3 functions at the end, this would read as:\n\nx_vector %&gt;% unique() %&gt;% length() %&gt;% function1() %&gt;% function2()  %&gt;% function3()\n\nStill long, but a lot easier to follow (at least I think so)!",
    "crumbs": [
      "Intro to R Coding",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>R Packages</span>"
    ]
  },
  {
    "objectID": "Sections/S3/ch3outline.html",
    "href": "Sections/S3/ch3outline.html",
    "title": "Outline",
    "section": "",
    "text": "In this section, you will learn about working with data objects in R. In particular, this section will cover…\n\nAn overview of file structure\nImporting data from files into R\nBasic dataframe structure\nManipulating data\nSummarizing data\nVisualizing data",
    "crumbs": [
      "Working with Data",
      "Outline"
    ]
  },
  {
    "objectID": "Sections/S3/DataImport.html",
    "href": "Sections/S3/DataImport.html",
    "title": "8  Importing Data into R",
    "section": "",
    "text": "8.1 Importing a csv file\nTo import a csv file to R, we can use the function read.csv(). There is a similar function in the tidyverse package called read_csv() that we can also use. We’ll go ahead and use the tidyverse version.\nThe syntax to use this function is:\nLet’s try reading in the “cdc_samp.csv” file and give the data frame the name cdc. You may need to add an extra line of code to get this to work (think back to our last tutorial about R functions and packages).",
    "crumbs": [
      "Working with Data",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Importing Data into R</span>"
    ]
  },
  {
    "objectID": "Sections/S3/DataImport.html#importing-a-csv-file",
    "href": "Sections/S3/DataImport.html#importing-a-csv-file",
    "title": "8  Importing Data into R",
    "section": "",
    "text": "name_for_data = read_csv(\"path_to_data\")\n\n\nHere name_for_data is any name you choose to call the data frame object that you will be creating with the read_csv() function. It can be helpful to give it a name that is relevant to the data, but you can call it whatever you want (with some limits–for example, the name can’t start with a number).\n\"path_to_data\" is the file path that will tell R where to look for your data. You can either provide the function with an absolute path to the file (starting with the root directory of your computer) or a relative path, starting at the current working directory.\n\n\n\n\n\n\n\nAssigning a name\n\n\n\nWarning: Naming the object is very important!\nIf you forget to choose a name for your data frame, R will import the data and print it, but it won’t save it as an object. If you just use read_csv() without the name_for_data = part, you won’t be able to manipulate or analyze the data.\n\n\n\n\n\n\n\n\nDuplicate names\n\n\n\nAnother warning: If you import two data sets and accidentally give them the same name, the one you import second will overwrite the first one! Sometimes this is useful; for example, if you just want to make a change to a dataset (more on this later). But be careful and when in doubt, give new data frames new names!\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint (if you get an error)\n\n\n\n\n\nIf you get the following error:\n\nError: could not find function “read_csv”\n\nyou forgot to load the tidyverse package!\nAdd a line of code above your read_csv() line to load the tidyverse (library(tidyverse)).\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n8.1.1 Making sure it worked\nGreat! If you were able to get the code chunk above to run without any error messages, then the code should have worked and we should now have an R object named cdc in our environment that we can work with.\nIf we were working in RStudio, we could check to make sure there is an object named cdc under the “Data” heading of the Environment tab (in the upper right-hand corner for most RStudio setups if you didn’t change the panel layout). Since we aren’t working in RStudio, we will use a function to make sure our read_csv() code worked. The function we will use is the exists() function and, as the name suggests, it just tells us if the object we are checking exists in our environment or not. It will return a logical value TRUE if the object exists and FALSE if it does not. The function expects the name of the object in “quotation marks.”\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIf you were able to run the code above, the output here should be TRUE. If your output says FALSE, go back to the previous section and make sure you can run the code without producing any errors.",
    "crumbs": [
      "Working with Data",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Importing Data into R</span>"
    ]
  },
  {
    "objectID": "Sections/S3/DataImport.html#importing-an-excel-file",
    "href": "Sections/S3/DataImport.html#importing-an-excel-file",
    "title": "8  Importing Data into R",
    "section": "8.2 Importing an Excel file",
    "text": "8.2 Importing an Excel file\nWe’ve successfully imported a csv file, but what if we get a different file type? For example, a lot of people store data in Excel. Can R handle those files? Yep! But we’re going to need to use a new package called the readxl package.\n\n\n\n\n\n\nReminder: Installing readxl\n\n\n\n\n\nRemember that if you don’t have this package installed on your local computer, you’ll need to install it once before you can load and use it. I’ve already installed it here, but remember that to install the package you can just run install.packages(\"readxl\") in your console in RStudio.\n\n\n\nOnce we have the readxl package loaded, the syntax is very similar to read_csv() from above. There are a few different functions that could work from this package, but the most generic one is read_excel(). The syntax is:\n\nname_for_data = read_excel(\"path_to_data\")\n\nLet’s try it using our ‘dds.xlsx’ file!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExercise:\n\n\n\nTry checking to see if this code worked (like we did above) by checking if an object called “dds” exists in our environment.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\nRemember to put \"dds\" in quotation marks!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nOnce again, this should output the logical value TRUE if the code worked properly. Once you have the readxl package, importing Excel files works just like importing csv files!",
    "crumbs": [
      "Working with Data",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Importing Data into R</span>"
    ]
  },
  {
    "objectID": "Sections/S3/DataImport.html#importing-r-data-files",
    "href": "Sections/S3/DataImport.html#importing-r-data-files",
    "title": "8  Importing Data into R",
    "section": "8.3 Importing R data files",
    "text": "8.3 Importing R data files\nThere is one other type of file that we will use from time to time in this class. This is a special kind of file called an R data file that saves R objects. The syntax is slightly different for this kind of file.\nThe syntax for importing an R data file is:\n\nload(\"path_to_data\")\n\n\n\n\n\n\n\nload()\n\n\n\nNotice how we didn’t include anything on the left side of the load() function here. We didn’t give the data a name!\n\n\nThe reason we don’t assign names to data loaded from an R data file is because these objects already come with a name. Since these are R objects that were saved specifically in a file format that R understands, they keep the name that they were given when they were first created in R. So how do we know what the name is? We can add an extra argument to this function called verbose. The syntax will become:\n\nload(\"path_to_data\", verbose = TRUE)\n\nThis tells R to print out the name of the data object once it is loaded so we know what to call it.\nLet’s see an example of this using our ‘census.rda’ file.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can see the message:\n\nLoading objects:  census\n\nThis is telling us that the object we loaded came with the name census. This is the name we should use to refer to that data object.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nNote: file names vs object names\n\n\n\n\n\nThe name of the R object doesn’t have to match with the file name like it did in this example. The file name “census.rda” and the object name census are two independent things. However, it can be helpful to have the file name and object name match, so they often will by convention.",
    "crumbs": [
      "Working with Data",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Importing Data into R</span>"
    ]
  },
  {
    "objectID": "Sections/S3/DataImport.html#other-file-types",
    "href": "Sections/S3/DataImport.html#other-file-types",
    "title": "8  Importing Data into R",
    "section": "8.4 Other file types",
    "text": "8.4 Other file types\nThere are other types of files that you may want to import into R. These include text files (.txt) and files from other statistical software packages like SAS (.sas7bdat) or stata (.dta). The syntax for reading in these files is very similar to reading in csv or Excel files so we won’t go into these data types in detail. There are lots of helpful tutorials and R documentation online if you ever need them (for example, this page goes through reading in files from multiple sources).",
    "crumbs": [
      "Working with Data",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Importing Data into R</span>"
    ]
  },
  {
    "objectID": "Sections/S3/DataImport.html#viewing-your-data",
    "href": "Sections/S3/DataImport.html#viewing-your-data",
    "title": "8  Importing Data into R",
    "section": "8.5 Viewing Your Data",
    "text": "8.5 Viewing Your Data\nGreat! We’ve now imported our first few data files into R. But how do we see the data we imported?\n\n8.5.1 The head() function\nAgain, in RStudio, you should be able to see a new object in your ‘Environment’ tab in the upper-right quadrant of your screen when you import a new data set. Within this tab, there is an option to view the data by clicking the small white box that appears next to the object name. Since we’re working on the web, we’ll go ahead and use a different function to take a look at the top few rows of the dataset. The function that will allow us to do this is head() that shows us the top few entries of a data frame, vector, or list.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint (if you get an error)\n\n\n\n\n\nIf you get the following error:\n\nError: object ‘cdc’ not found\n\nthis is R’s way of telling you that you don’t currently have an object loaded into your environment called ‘cdc’.\nWhen you see an error like this, you should make sure the code used to import the data worked properly and that you don’t have any spelling errors (R is case sensitive so you have to be very careful to spell things exactly correctly).\nMake sure you were able to successfully run the code above with the read_csv() function without any errors before running this code block.\n\n\n\nAwesome! Here we see the top 6 rows of the cdc data frame. There are 9 columns: genhlth, exerany, hlthplan, smoke100, height, weight, wtdesire, age, gender.\n\n\n\n\n\n\ntail() function\n\n\n\n\n\nIf you want to look at the last few entries of an R object, there is a similar function to the head() function called tail().\n\n\n\n\n\n8.5.2 The skim() function\nAnother way we can start to take a look at the data is to use a function from the R package skmir. The function is called skim and gives us a nice overview of the contents included in our data.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThis function breaks our columns into groups based on the type of variable they are. Here we see that genhlth and gender are characters and the rest are being treated as numeric (even though it looks like we may have a few other binary variables that were coded as 0/1—more on this later). The summary information gives us a snapshot of the contents of each column in the data. More information about the specific sections of the output can be found below.\n\n\n\n\n\n\nUnderstanding skim() output\n\n\n\n\n\nThe columns for categorical variables are:\n\n\n\n\n\n\n\nAttribute\nDescription\n\n\n\n\nn_missing\nthe number of rows with missing value (NA) in the corresponding columns\n\n\ncomplete_rate\nproportion of rows that are not missing (not NAs)\n\n\nmin\nthe minimum character length of values in the column\n\n\nmax\nthe maximum character length of values in the column\n\n\nempty\nthe number of empty characters in the column\n\n\nn_unique\nthe number of unique values in the column\n\n\nwhitespace\nthe number of rows containing only white space in the column\n\n\n\nThe columns for numeric variables are:\n\n\n\n\n\n\n\nAttribute\nDescription\n\n\n\n\nn_missing\nthe number of rows with missing value (NA) in the corresponding columns\n\n\ncomplete_rate\nproportion of rows that are not missing (not NAs)\n\n\nmean\nthe mean (average) value of the non-missing values in the column\n\n\nsd\nthe standard deviation of the non-missing values in the column\n\n\np0\nthe minimum value observed in the column\n\n\np25\nthe 25th percentile of values observed in the column\n\n\np50\nthe median (50th percentile) of values observed in the column\n\n\np75\nthe 75th percentile of values observed in the column\n\n\np100\nthe maximum value observed in the column\n\n\nhist\na histogram showing the shape of the distribution of values in the column\n\n\n\n\n\n\n\n\n8.5.3 The View() function\nWhen we’re working in RStudio, we can also use the View() function to look at an entire data frame. This will open up a spreadsheet-like data viewer in a new tab in RStudio where you can scroll through all the rows and columns in a data frame. We can’t use this here or in R Markdown files (which can knit to PDF or HTML, for example) because it requires opening a new data viewer tab. It is a useful function when you’re working interactively in RStudio, though!",
    "crumbs": [
      "Working with Data",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Importing Data into R</span>"
    ]
  },
  {
    "objectID": "Sections/S3/Dataframes.html",
    "href": "Sections/S3/Dataframes.html",
    "title": "9  Data Frames",
    "section": "",
    "text": "9.1 Rows and Columns",
    "crumbs": [
      "Working with Data",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Data Frames</span>"
    ]
  },
  {
    "objectID": "Sections/S3/Dataframes.html#rows-and-columns",
    "href": "Sections/S3/Dataframes.html#rows-and-columns",
    "title": "9  Data Frames",
    "section": "",
    "text": "9.1.1 nrow() and ncol() functions\nThe standard setup for a data frame is to put individual observations (so in this case, different people) in the rows, and different attributes (variables) in the columns. In the cdc data frame, each row corresponds to one individual, and each column corresponds to a variable.\nFrom the output above, we can see that the 1st person in the data set has the value \"very good\" for the variable genhlth, the value 1 for the variable exerany, and so on.\nWe may want to know how many rows and columns are included in our data. We can find this out using the functions nrow() and ncol().\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThis tells us that there are 60 rows (60 observations) and 9 columns (9 variables) recorded in our data.\n\n\n9.1.2 colnames() function\nIf we want to get a list of all the column names in the dataset, we can use the colnames() function in R, which will just print out the names of all of the columns in the data.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere we can see the names of the 9 columns included in our data. Remember that R is case-sensitive so this can be a helpful function when you first start working with a data set. For example, if I was trying to refer to the column named \"age\" but I accidentally spelled it with a capital A, \"Age\", R wouldn’t understand which variable I was referring to. Checking the column names at the start can help avoid future confusion/frustration with misspellings 🙂",
    "crumbs": [
      "Working with Data",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Data Frames</span>"
    ]
  },
  {
    "objectID": "Sections/S3/Dataframes.html#sec-data_manipulation",
    "href": "Sections/S3/Dataframes.html#sec-data_manipulation",
    "title": "9  Data Frames",
    "section": "9.2 Making changes to a dataframe",
    "text": "9.2 Making changes to a dataframe\n\n9.2.1 Making a new column\nAs with most things in R, there are multiple ways to make new columns in a data frame. I will be using the tidyverse syntax and functions to do this, but there are other ways to do this.\nThe function in the tidyverse (and specifically, the dplyr package) to make a new column is mutate().\nThe syntax will be:\n\nmutate(new_column = some_function(existing_column))\n\nYou don’t need to use a pre-existing column to make the new column (you could just type out a vector with the new column values), but we generally will be using pre-existing columns to make new columns.\nFor example, we can see that there is a column called \"exerany\" in our data. This column indicates if the individual has exercised in the past month, where a 1 indicates that they have exercised in the past month and 0 indicates that they have not. This is a fairly common coding of binary variables, but unless you have the codebook readily available, you wouldn’t know for sure which response (yes/no) corresponds to which value (1/0). It can be helpful to make new variable that reads as “Yes”/“No” instead of 1/0 for clarity and to make sure we don’t accidentally treat this categorical variable as a numeric variable in later analyses.\nWe will make a new factor variable called \"exerany_f\" that takes on the values 0 and 1 with the labels \"No exercise in past month\" and \"Exercise in past month\", respectively. We will use the values from the \"exerany\" variable to help us make the new variable.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n9.2.1.1 Columns names vs object names\nOh no! Why did we get an error?\nLet’s take a look at the error message:\n\nError: object ‘exerany’ not found\n\nThis error message is telling us that there isn’t an object called 'exerany' that R can find. This is because 'exerany' is the name of a column in our data frame cdc, not a standalone object within our R environment.\nTo fix this error, we just need to tell R where to look for the variable called 'exerany'.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNotice that this printed out a data frame that now has 10 columns instead of the previous 9. The new column is the variable we just made, 'exerany_f'. You can’t see it because there is a limit to the number of columns printed, but there is a line telling us that there is 1 more variable: exerany_f &lt;fct&gt;, which means there is also a factor variable called exerany_f that isn’t being shown in the printed output.\nRight now, we haven’t actually saved the new column. To see this, let’s use the colnames() function we learned last time.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nBasically, mutate will add a new column to your data frame and return a data frame (that then gets printed in your output). If you want to save the new variable to be able to use it later, we have to either update the cdc data frame or save this as a new data frame.\n\n\n\n9.2.2 Saving a new data frame\nTo save a new data frame we can use this code:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n9.2.3 Updating the old data frame\nIf we don’t want to make a new data frame with a new name, we can also just update the original cdc object by replacing cdc_new in the code above with cdc. This will overwrite the old cdc object with the updated data frame with the additional column (be careful when overwriting objects, especially if you’re removing some entries of the data).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nGreat! If we want to take a look at the new column, we can use a function in the tidyverse package called select() to select just a few columns to look at. Let’s grab the original variable, exerany, and the new one, exerany_f, and look at the first few entries to make sure we defined the new variable correctly.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIt looks like this worked! The first 6 rows all had a 1 in exerany so they all show up as \"Exercise in the past month\" under exerany_f.\n\n9.2.3.1 Using the $ symbol to grab a column\nAnother way to grab a specific column from a data frame is to use the $ symbol, using the following syntax\n\ndata_name$column_name\n\nThis will grab the column and treat it as a vector.\nFor example, if we want to grab the new column, exerany_f, and the old column, exerany, and take a look at the last few entries, we can use the tail() function after grabbing the desired column:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n9.2.4 Updating existing variables\nSometimes instead of making a new column, we just want to update an existing column. We can use the mutate() function for this too. The syntax this time will be:\n\nmutate(existing_column = some_function(existing_column))\n\nThis will overwrite the column with the new values.\nFor example, let’s say the values \"No exercise in the past month\" and \"Exercise in the past month\" that we just created are too long for our liking. Maybe we want to update this column so the values are just \"No exercise\" and \"Exercise\". We can do this with the following code:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNotice that now the same column as before exerany_f has been updated from what we originally created and now contains the shorter labels.\n\n\n\n\n\n\nWarning: Overwriting\n\n\n\nBe careful with updating existing column names (and other R objects for that matter)!\nIf you make a mistake, this will overwrite the old column, so you won’t have access to the original contents anymore and you will have to rerun some of your code (like when you first read in the data) to reset the code and try again.\n\n\n\n\n9.2.5 Filtering Data Frames\nSometimes we only want to look at a subset of the rows (observations) in our data frame.\nFor example, maybe I want to run an analysis using only individuals who have a genhlth value of \"excellent\" or individuals who are at least 30 years old. To do this, I can use the filter() function (also within the dplyr package from the tidyverse).\nIn this code chunk, I filter so that I am only left with observations who have a “genhlth value of \"excellent\":\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIn this code chunk, I filter so that I am only left with observations whose age is at least 30:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nUsing the filter function, we can then run functions just on the subsetted data. For example, we could check the number of observations for each subet using the nrow() function.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere we can see that there are 17 observations with genhlth value “excellent” and 48 observations with an age of at least 30. If we know we want to continue using these subsets for future statistical analyses, we might choose to save the filtered data sets with new names so we don’t have to keep using the filter() function.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNow if we want to run any further analysis using just the subset of individuals who were at least 30 years old or had “excellent” general health condition, we can use cdc_30y or cdc_excellent, respectively. This can be helpful if you want to run multiple analyses on the same subset of observations but still want access to the full data set too.",
    "crumbs": [
      "Working with Data",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Data Frames</span>"
    ]
  },
  {
    "objectID": "Sections/S3/Summaries.html",
    "href": "Sections/S3/Summaries.html",
    "title": "10  Data Summarization",
    "section": "",
    "text": "11 Introduction\nIn this tutorial, we will be covering how to summarize data using R. This can include:\nWe will once again be using the census data from Tutorials 3 and 5 to demonstrate how to create numerical summaries using R. I’ve already read the data in for you; feel free to run the code below to remind yourself of the variables in the data set that we will be working with.\nWe will also be utilizing the tidyverse package again, so let’s go ahead and load that package into our work space so we don’t forget!",
    "crumbs": [
      "Working with Data",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Data Summarization</span>"
    ]
  },
  {
    "objectID": "Sections/S3/Summaries.html#quantitative-variables",
    "href": "Sections/S3/Summaries.html#quantitative-variables",
    "title": "10  Data Summarization",
    "section": "12.1 Quantitative variables",
    "text": "12.1 Quantitative variables\nIn Tutorial 5, we made a histogram and box plot to display the variable total_personal_income. This is a quantitative variable, so the summary metrics that we can use are measures of center such as mean or median and measures of spread such as standard deviation, variance, and interquartile range (IQR).\n\n12.1.1 The summarise() function\nWe can calculate these summary statistics within the data set, we can utilize the summarise() function from the dplyr package (part of the tidyverse). This function is similar to the mutate() function that we used in Tutorial 4 in that it can create new columns. However, instead of just adding new columns to an existing data set, the summarise() function condenses the data and only shows the summarized information. To see this, let’s try taking the mean of the variable total_personal_income both with the mutate() function and with the summarise() function.\nTry running the following two code chunks to see the difference between mutate() and summarise()\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNotice how the mutate() implementation adds a new column with the mean income in the data set repeated for every row, whereas the summarise() implementation just prints the mean income and exludes all individual rows.\n\n\n12.1.2 The drop_na() function\nNotice that we had to drop the missing values (NA values) from the total_personal_income column to calculate the mean. We will have to do this to calculate all of the additional summary statistics, so one option we have is to exclude all of the rows with a missing value in the total_personal_income column before applying the summarise() function. We can do this with the drop_na() function (from the tidyr package also within the tidyverse). Inside the parentheses, we can include the names of all of the columns that we want drop missing observations from. If we leave this blank (just write drop_na() with nothing in the parentheses, R will remove any row with a missing value in any column). In this case we’ll just drop the rows with missing total personal income. This will be helpful when we want to compute multiple statistics and don’t want to include a na.rm = T argument in each function.\nTo see how the drop_na() function works, we can run the following code to check the number of rows in the data frame with and without applying the drop_na() function.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nNote\n\n\n\nNote that drop_na() doesn’t permanently remove the rows with missing values unless save you save the data frame with an assign operator (= or &lt;-). For example,\ncensus2 &lt;- census %&gt;%\n  drop_na(total_personal_income)\nWould save the filtered data set with no missing values in total_personal_income under the new name census2. If we had used the old name (census instead of census2), this would overwrite our old data frame. Be careful with this and only overwrite your data if you know you want to keep the changes you’re making!\n\n\nIf we use the filtered data with no missing values in the total_personal_income column, we can omit the na.rm = T argument when we take the mean:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n12.1.3 Calculating multiple statistics\nWe don’t have to just calculate one summary statistic at a time. For example, we can calculate the mean, median, minimum, maximum, 25th percentile, 75th percentile, standard deviation, and variance, all within one sumamrise() function.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNotice that the mean is much larger than the median, indicate left skew in the data.\nWe can couple these statistics with a histogram to get a fuller picture of the distribution.\n\nHistogramCode\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nThis is the code used to produce the plot:\n```{webr-r}\ncensus %&gt;%\n  ggplot(aes(x = total_personal_income)) +\n  geom_histogram(binwidth = 10000, fill = \"skyblue\", color = \"black\") + # bins of size $10,000\n  theme_bw() + \n  labs(x = \"Total personal income ($)\")\n```",
    "crumbs": [
      "Working with Data",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Data Summarization</span>"
    ]
  },
  {
    "objectID": "Sections/S3/Summaries.html#qualitative-variables",
    "href": "Sections/S3/Summaries.html#qualitative-variables",
    "title": "10  Data Summarization",
    "section": "12.2 Qualitative variables",
    "text": "12.2 Qualitative variables\nIn Tutorial 5, we made a bar plot showing the breakdown of marital status in the census data. We can also compute summary statistics for this variable. For categorical variables like this, there aren’t as many summary statistics we can compute; we generally stick to counts and proportions.",
    "crumbs": [
      "Working with Data",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Data Summarization</span>"
    ]
  },
  {
    "objectID": "Sections/S3/Summaries.html#the-xtabs-function",
    "href": "Sections/S3/Summaries.html#the-xtabs-function",
    "title": "10  Data Summarization",
    "section": "12.3 The xtabs() function",
    "text": "12.3 The xtabs() function\nOne way to do this is to use the xtabs() function from the stats package (which comes pre-loaded in R). The syntax for this function is:\n\nxtabs( ~ variable_name, data = data_name)\n\nWe will also use this function later when we want to make a contingency table in which we tabulate an outcome across different groups.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIf we want to show this in terms of proportions instead of raw counts, we can apply the prop.table() function after this:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere we can see that never married/single is the most frequent category in the data (n = 222, 44.4%), followed by married with spouse present (n = 192, 38.4%), divorced (n = 38, 7.6%), widowed (n = 31, 6.2%), married with spouse absent (n = 14, 2.8%), and the least common was separated (n = 3, 0.6%).",
    "crumbs": [
      "Working with Data",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Data Summarization</span>"
    ]
  },
  {
    "objectID": "Sections/S3/Summaries.html#the-n-and-group_by-functions",
    "href": "Sections/S3/Summaries.html#the-n-and-group_by-functions",
    "title": "10  Data Summarization",
    "section": "12.4 The n() and group_by() functions",
    "text": "12.4 The n() and group_by() functions\nWe can also make these tables using the summarise function like we did above. However, to do this, we are going to need to first utilize the group_by() function. The group_by() function from the dplyr package allows us to specify groups within which we will calculate summary statistics. To make a table of counts, we will first group by martial status and then use the n() function, which simply counts the number of observations present. By grouping first, we will ensure that we are counting the number of observations within each level of the marital_status column separately.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIf we want to calculate proportions, we can add an additional line of code:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAgain, we can add a plot to visualize this difference:\n\nBar plotCode\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nThis is the code used to produce the plot:\n```{webr-r}\ncensus %&gt;%\n  ggplot(aes(x = marital_status, fill = marital_status)) +\n  geom_bar(color = \"black\") + \n  theme_classic() + \n  labs(title = \"Marital Status\", x = element_blank()) + \n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1), # rotate axis labels\n      legend.position = \"none\"  ) # remove color labels (labeled on x-axis, color is just for fun :) )\n\n```",
    "crumbs": [
      "Working with Data",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Data Summarization</span>"
    ]
  },
  {
    "objectID": "Sections/S3/Summaries.html#one-quantitative-and-one-qualitative",
    "href": "Sections/S3/Summaries.html#one-quantitative-and-one-qualitative",
    "title": "10  Data Summarization",
    "section": "13.1 One quantitative and one qualitative",
    "text": "13.1 One quantitative and one qualitative\nSuppose we want to compare total personal income between biological sexes. To do this, we can calculate the same summary statistics we did above for total personal income, but first group by sex to calculate these statistics within each group. We can then make comparisons to see how similar/different they are. We will again utilize the group_by() function.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere we can see that within this sample, the mean income for female respondents was $17,441 and median was $14,000 while for male respondents these figures were $39,809 and $24,050, respectively. There was also a lot more variability in income reported by male respondents, with a standard deviation of $59,926 compared to $16,774 among female respondents.\nWe can also see this in side-by-side boxplots or histograms.\n\nHistogramsCode\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nThis is the code used to produce the plot:\n```{webr-r}\ncensus %&gt;%\n  ggplot(aes(x = total_personal_income, fill = sex)) +\n  geom_histogram(binwidth = 10000,  color = \"black\") + # bins of size $10,000\n  theme_bw() + \n  labs(x = \"Total personal income ($)\") + \n  facet_wrap(. ~ sex, nrow = 2) + \n  theme(legend.position = \"none\")\n\n```\n\n\n\n\nHistogramsCode\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nThis is the code used to produce the plot:\n```{webr-r}\ncensus %&gt;%\n  ggplot(aes(y = total_personal_income, x = sex, color = sex)) +\n  geom_boxplot() + \n  theme_bw() + \n  labs(y = \"Total personal income ($)\", x = \"Biological Sex\") + \n  theme(legend.position = \"none\")\n\n```",
    "crumbs": [
      "Working with Data",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Data Summarization</span>"
    ]
  },
  {
    "objectID": "Sections/S3/Summaries.html#two-qualitative-variables",
    "href": "Sections/S3/Summaries.html#two-qualitative-variables",
    "title": "10  Data Summarization",
    "section": "13.2 Two qualitative variables",
    "text": "13.2 Two qualitative variables\nFor two categorical variables, we can again make tables of counts and proportions and compare across groups. For example, we could check the breakdown of marital status by biological sex. We can do this using the xtabs() function again by simply adding in the extra variable:\n\nxtabs( ~ variable_name1 + variable_name2, data = data_name)\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIn this case, adding proportions (or at least marginal totals) will be helpful if the groups are different sizes. In this case we will have options for how we want to take the proportions. We can:\n\ntake the proportion overall\ntake the proportion within rows\ntake the proportion within columns\n\nWhich one of these we want to use will depend on the question we’re trying to answer.\n\n13.2.0.1 Table with margins (row and column sums)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n13.2.0.2 Table of proportions (overall)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThis table shows the overall proportion. It shows that 20% of our sample is male and married with a spouse present and 18.4% of our sample is female and married with a spouse present.\n\n\n13.2.0.3 Table of proportions (by row)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThis table shows the proportion within rows. The proportions sum to 1 along the rows. This tells us that 48% of male respondents were never married/single compared to 40% of female respondents who were never married/single. About 8% of the female respondents were widowed, compared to only 4% of the male respondents.\n\n\n13.2.0.4 Table of proportions (by column)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nFinally, this table shows the proportion within columns. The proportions sum to 1 along the columns. This tells us that among those who were widowed, 64.5% were female and 35.5% were male.\n\n\n13.2.0.5 Tables with summarise()\nWe can also make these tables by using the summarise() function paired with group_by as before:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEach of these tables shows something slightly different and the one that is most relevant will depend on the trend we are trying to evaluate and possibly the sampling mechanism.\nTo view these in a plot, we have a lot of options. Two good options are to either calculate proportions and plot the proportions side-by-side, or to plot the counts for each group separately and place the plots next to/ on top of each other.\n\nBar plotCode\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nThis is the code used to produce the plot:\n```{webr-r}\ncensus %&gt;%\n  group_by(sex, marital_status) %&gt;%\n  summarise(count = n()) %&gt;%\n  mutate(prop = count/sum(count)) %&gt;%\n  ggplot(aes(x = marital_status, y = prop, fill = sex)) +\n  geom_bar(color = \"black\", position = \"dodge\", stat = \"identity\") + \n  theme_classic() + \n  labs(title = \"Marital Status Proportions\", x = element_blank(),\n       y = \"Proportion\", fill = element_blank()) + \n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)  )# rotate axis labels\n\n```\n\n\n\n\nBar plotCode\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nThis is the code used to produce the plot:\n```{webr-r}\ncensus %&gt;%\n  ggplot(aes(x = marital_status, fill = marital_status)) +\n  geom_bar(color = \"black\") + \n  theme_classic() + \n  labs(title = \"Marital Status by Sex\", x = element_blank()) + \n  facet_wrap(. ~ sex, nrow = 1) +\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1), # rotate axis labels\n      legend.position = \"none\"  ) # remove color labels (labeled on x-axis, color is just for fun :) )\n```",
    "crumbs": [
      "Working with Data",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Data Summarization</span>"
    ]
  },
  {
    "objectID": "Sections/S3/Summaries.html#two-quantitative-variables",
    "href": "Sections/S3/Summaries.html#two-quantitative-variables",
    "title": "10  Data Summarization",
    "section": "13.3 Two quantitative variables",
    "text": "13.3 Two quantitative variables\nIf we want to evaluate the association between two quantitative variables, we typically use the correlation between the two variables (denoted R or r).\n\n13.3.1 Correlation\nTo take the correlation between two variables, we can use the cor() function from the stats package. The function is expecting data in the form of two vectors. For example, if we want to take the correlation between age and total personal income, we can grab them both from the data set using the data_name$variable_name notation and then take the correlation. Once again, we will need to remove missing values to get a numeric value here. The argument to do this within the cor() function is the use argument, which we will set equal to \"pairwise.complete.obs\", which tells R to only use rows of the data that are complete (non-missing) for both age and total_personal_income columns.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can also do this within a summarise() function :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere we can see that there is a slight positive correlation of 0.131 between age and total personal income. We can also see this somewhat in a scatterplot:\n\nBar plotCode\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nThis is the code used to produce the plot:\n```{webr-r}\ncensus %&gt;%\n  ggplot(aes(x = age, y = total_personal_income)) + \n  geom_point() + \n  theme_bw() + \n  labs(x = \"Age (years)\", y = \"Total Personal Income ($)\")\n```",
    "crumbs": [
      "Working with Data",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Data Summarization</span>"
    ]
  },
  {
    "objectID": "Sections/S3/DataViz.html",
    "href": "Sections/S3/DataViz.html",
    "title": "11  Data Visualization",
    "section": "",
    "text": "11.1 ggplot syntax\nThe ggplot2 package within the tidyverse suite of packages utilizes similar syntax to create multiple types of graphs.\nAll ggplot2 plots will begin with a call to the ggplot() functions, to which you will supply the data you will be using to make the plot and specify the variables (columns) you would like to use in the plot. We can then add extra features on top of this base plot using other ggplot2 functions, strung together with the + symbol.\nI tend to use the following syntax:\n{data_name} %&gt;%\nggplot(aes(x = {x_axis_variable_name}, y = {y_axis_varible_name})) +\ngeom_{PLOT_TYPE}()\nThe code in the brackets {} are the things you should change based on your data and the type of plot you want to make.\nThe important thing to note about this code is that any variable you want to use from the data frame that you’ve supplied (in this example, data_name) must be wrapped within the aes() function. This is how R understands that you are trying to pull a column from the data frame and use it in the plot.\nThere are lots of different plots that ggplot2 can make, each with a different function. Some common ones that we will use are:\nLet’s see some examples! We will use the census.rda data from Tutorial 3. I have already loaded the data for you. Reminder: the data frame is saved under the name census. Here’s a reminder of what the data look like:\nSince we are going to be using the ggplot2 functions, we need to load the tidyverse! I’m going to have this code auto-run but make sure when you’re working in RStudio that you type and run this line at the beginning of any R session/document that you want to use tidyverse functions for!",
    "crumbs": [
      "Working with Data",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "Sections/S3/DataViz.html#ggplot-syntax",
    "href": "Sections/S3/DataViz.html#ggplot-syntax",
    "title": "11  Data Visualization",
    "section": "",
    "text": "geom_histogram(): makes a histogram\ngeom_boxplot(): makes a boxplot\ngeom_bar(): makes a bar plot\ngeom_point(): makes a scatterplot\ngeom_qq(): makes a quantile-quantile (QQ) plot\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Working with Data",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "Sections/S3/DataViz.html#histograms",
    "href": "Sections/S3/DataViz.html#histograms",
    "title": "11  Data Visualization",
    "section": "11.2 Histograms",
    "text": "11.2 Histograms\nA histogram is a visual representation of quantitative data in which the range of values is split into adjacent, non-overlapping intervals (or “bins”) and the number of observations that fall into each interval is counted and depicted on the plot.\nLet’s make a histogram of the variable total_personal_income.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nYou should see a few messages shown in the output. These messages aren’t errors (they aren’t a problem), but it’s good to know what they mean.\nThe first message:\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\nis telling us that the geom_histogram() function defaulted to splitting the range into 30 intervals (bins). We can change this if we want using either the bins argument to specify the number of bins desired, or the bindwidth argument to specify the size of the bins/intervals, in geom_histogram().\nFor example, if we want to make more, smaller width bins we could specify bins = 50 instead of the default of 30 using the following code:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe could also specify the size of the bins, rather than the number of bins. For example, since this variable refers to annual income, maybe we would want to show bins of size $10,000. Specifying the binwidth argument is highly data-dependent (we wouldn’t want to use a bin size of 10,000 if the variable was height measured in inches, for example 🙂 ). Here’s an example of specifying binwidth:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThe other message is a warning message:\n\nWarning: Removed 108 rows containing non-finite outside the scale range (`stat_bin()`)\n\nThis is R’s way of telling us that some of the rows were removed and were not included in the plot. We can see that 108 observations (rows) were removed for plotting. This is generally because there are missing values. The ggplot2 functions don’t have any way of plotting missing values, so they get skipped in these plotting functions.\nTo see that these observations came from missing values, we can look a bit more into the data. For example, we can count the number of rows for which the column total_personal_income is an NA value using the is.na() function:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSum of logical values\n\n\n\n\n\nNote here that is.na(census$total_personal_income) returns a vector of TRUE/FALSE (logical) values. When you take the sum of TRUE/FALSE values in R, it returns the number that are TRUE.\nFor example:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nWe can see from these histograms that we have a highly right-skewed variable. There are a lot of observations under $100,000 (1e+05) and then a handful of observations all the way to over $400,000.",
    "crumbs": [
      "Working with Data",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "Sections/S3/DataViz.html#box-plots",
    "href": "Sections/S3/DataViz.html#box-plots",
    "title": "11  Data Visualization",
    "section": "11.3 Box plots",
    "text": "11.3 Box plots\nAnother way we can visualize quantitative data is using box plots. Box plots can be particularly helpful if you want to compare the distribution of a particular quantitative variable across different groups. For example, maybe we want to compare the distribution of total_personal_income across different levels of marital_status. We can do this with box plots.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nNote\n\n\n\nHere we can see that the labels on the x-axis are overlapping, making it hard to read the plot. We’ll get more into this later when we go over other aesthetic changes we can make to plots made with ggplot.",
    "crumbs": [
      "Working with Data",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "Sections/S3/DataViz.html#bar-plots",
    "href": "Sections/S3/DataViz.html#bar-plots",
    "title": "11  Data Visualization",
    "section": "11.4 Bar plots",
    "text": "11.4 Bar plots\nA bar plot is a tool to visualize a categorical variable. It is similar to a histogram in that it shows the number of times each level of a variable is observed in a data set. For example, in the plot above we showed the distribution of personal income across marital status, but maybe we want to know how many people fell into each of these marital status categories. We can use a bar plot for this.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nFrom this plot we can see that “Never married/single” is the most commonly observed marital status in our data, followed closely by “Married/spouse present”. The status “Separated” was the last common, followed by “Married/spouse absent”. The categories “Divorced” and “Widowed” were somewhere in between.",
    "crumbs": [
      "Working with Data",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "Sections/S3/DataViz.html#scatter-plots",
    "href": "Sections/S3/DataViz.html#scatter-plots",
    "title": "11  Data Visualization",
    "section": "11.5 Scatter plots",
    "text": "11.5 Scatter plots\nA scatter plot is a way of visualizing the relationship between two numeric variables. For example, if we want to know how total_personal_income relates to age in this data set, we can use a scatter plot. Here is some example code to make a scatter plot:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Working with Data",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "Sections/S3/DataViz.html#more-ggplot-aesthetic-options",
    "href": "Sections/S3/DataViz.html#more-ggplot-aesthetic-options",
    "title": "11  Data Visualization",
    "section": "11.6 More ggplot aesthetic options",
    "text": "11.6 More ggplot aesthetic options\nSo far we have only made basic plots using ggplot2, however this package makes it really easy to make much nicer looking plots without too much extra coding. We can do things like change the background color, add titles and subtitles, change the axis labels, and much more. I’ll go over a few of these options but much more can be found online at resources like these: ggplot tutorial, ggplot reference page\nWe will return to our side-by-side box plot example showing the total personal income by marital status to demonstrate how we can make the plot look a little nicer.\n\n11.6.1 Facets\nOne really nice feature of ggplot2 is the ability to make multiple plots of the same variable(s) across different subgroups using something called “facets”. For example, let’s say we want to make the same box plots we did before showing the distribution of personal income by marital status, but we want to split by sex to see if there are any different trends between male and female participants in our data set. We can do this using the function facet_wrap():\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nFaceting lets us compare trends across groups. We can facet across more than just one variable, too. For, example, we could facet across both sex and race (column name race_general). In this case, I like to use a slightly different function called facet_grid() because it makes the labeling a little easier to follow.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nCaution: Busy plots\n\n\n\nNotice that this busied up the plot a lot. It’s generally only a good idea to use multiple faceting variables if each only has a few (2-3) possible levels to make sure our figure is still interpretable.\n\n\n\n\n\n\n\n\nFacets: different scales\n\n\n\n\n\nSometimes you’ll notice that when you add facets to a plot, that not every facet takes up the full range of values on either the x-axis or y-axis, so the plots don’t use space very effectively. If you want to change this, you can the following arguments to the facet_wrap() function:\n\nscales = \"free_x : to allow the x-axis to have different scales (ranges/degree of zoom) across the plots\nscales = \"free_y : to allow the y-axis to have different scales (ranges/degree of zoom) across the plots\nscales = \"free : to allow both the x- and y-axes to have different scales (ranges/degree of zoom) across the plots\n\nExample:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n11.6.2 Labels/titles\nOne issue with our plot right now is that it doesn’t have a title and the axis labels are column names with underscores. If we wanted to include this figure in a paper, we might want to change these. We can do this by adding the labs() function to the plot to update the plot labels.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThese labels are a lot nicer than the default labels!\n\n\n11.6.3 Background color\nDon’t like the grey grid background? You can change it, too! I like to use a black and white grid background or sometimes just a plain white background. You can achieve this by adding theme_bw() or theme_classic() to the plot. There are many other options for plot themes that you can find here: _____\n\n11.6.3.1 Black and white grid with theme_bw()\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n11.6.3.2 White background with theme_classic()\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n11.6.4 Plot colors\nYou can also add color to plots to help display information. For example, maybe we want to color the box plots by marital status or by sex to further emphasize a comparison that we’re trying to make. If you want to pick your own colors, see this reference for more information about plot colors in ggplot2.\n\n11.6.4.1 Color by marital status\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n11.6.4.2 Color by sex\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nUsing color to display information\n\n\n\nGiven that some people have trouble distinguishing color, it is best practice not to have color be the only way in which information is portrayed.\n\n\n\n\n11.6.4.3 Static colors\nYou can also change colors without using variables from data. For example, you could make all of the box plots blue by including color=\"blue\" to the geom_boxplot() function. If you are just trying to change the color but not trying to use color to indicate the value of a variable, put this argument doesn’t need to go inside an aes() function. There are lots of colors to choose from in ggplot (link).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\ncolor vs fill\n\n\n\n\n\nFor some types of plots there is an additional argument fill that you can use to color parts of the plot. For example, in bar plots and histograms, changing the color argument will change the outline color of the bars while changing the fill argument will change the color inside the bars.\nExample:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n11.6.5 Formatting axis text\nAs we noted before, the text on the x-axis of our box plots showing the different values of marital_status are overlapping, making it hard to read the plot. One way we can fix this is using the following code to rotate the text:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nLooking up technical code\n\n\n\nThis code is starting to get pretty technical. You probably won’t memorize this (I haven’t! I look up how to do it every time I need to rotate axis labels, including just now while I was making this tutorial 🙂 ).\nYou aren’t expected to know how to do this from memory; you can use old example code or search online references/forums for help with this kind of thing.",
    "crumbs": [
      "Working with Data",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Beginner R Tutorials",
    "section": "",
    "text": "Welcome\nThis book contains a collection of tutorials for beginner R programmers. The goal is to new R users familiar with basic R programming syntax, data import and manipulation, and some data summarization and visualization methods.\nThis book was created for the course BIOST 2041: Introduction to Statistical Methods at the University of Pittsburgh School of Public Health.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#working-through-the-examples-in-this-book",
    "href": "index.html#working-through-the-examples-in-this-book",
    "title": "Beginner R Tutorials",
    "section": "Working Through the Examples in this Book",
    "text": "Working Through the Examples in this Book\n\nRunning the code chunks in this tutorial\nIn the following chapters, I will introduce a handful of new concepts in R and will include example code to demonstrate how the code works. When you get to a code chunk (an example of a code chunk is shown below), you can edit the code in the chunk if necessary and run the code to see the output by either hitting the “Run Code” button or by placing your cursor in the code chunk you want to execute and typing command (⌘) + return (↩︎) (on mac) or Ctrl + Enter (on windows).\nSometimes certain code chunks will require output from previous code chunks. I have tried to indicate when this is the case, but if you ever get any errors, go back and make sure you haven’t skipped any sections.\n\n\nCode output\nIf a code chunk produces output, you will see it appear below the code chunk after you execute (run) the code in the chunk. If there are multiple lines of code that produce output, you will see the output appear in order below the code chunk if you hit the “Run Code” button. You can also execute each line separately using the keystrokes mentioned above.\n\n\nThe ‘Start over’ button\nEach code chunk has a  button in the upper right corner that allows you to reset the code in the chunk. If you make a mistake and want to start from scratch, hit this button!\n\n\nComments\nYou may notice some lines of code that start with the pound symbol, #, and show up in a different text color inside the code chunks. These are called comments. R doesn’t execute anything when it sees a comment. Comments are just notes to yourself or anyone else reading your code! It’s good practice to add comments to your code at each line to help you remember what the code was meant to do, or to help someone else who may be reading your code understand what the code is supposed to be doing.\n\n# this is an example of a comment!\n\n\n\n\n\n\n\nExercise:\n\n\n\nTry writing your own comment in the code chunk below!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nHint\n\n\n\n\n\nThink about what the line of code should start with.\nIf you hit “Run Code” you should see that nothing is executed.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Welcome"
    ]
  }
]