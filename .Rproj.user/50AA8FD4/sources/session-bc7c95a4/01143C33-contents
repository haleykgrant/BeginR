---
title: "R Functions"
author: "Haley Grant"
engine: knitr
webr:
  packages: ['tidyverse']
  show-startup-message: true
---



We've already shown some examples of functions in R. You can think of R functions kind of like a recipe. You need to tell R what dish you want to make (the function) and give it some ingredients (called arguments), and then R will make the dish for you!

Functions in R all use the same general syntax:

::: {style="text-align: center;"}
[`function_name(argument1 , argument2 , ...)`]{style="font-family: 'Monaco';"}
:::

where here the name of the function is `function_name` and the arguments for the function are passed to the function inside a set of parentheses. Some functions have no arguments, some have one, and some have many.

For example, the `mean()` function we used in the previous chapter is a built-in R function that takes a vector of numbers (it can also take a vector of logical values or some more advanced data types like dates) and returns the mean (average) value by adding up all of the entries in the vector and dividing by the length. Functions in R are really helpful because it means we don't have to write out the full code ourselves.

For example, both lines of code below do the same thing, but one is a lot easier (imagine if the vector had been even longer)!

```{webr-r}
# make a vector with the values -1, 1, 2, 3, 1, 2, 3
x_vector = c(-1, 1, 2, 3, 1, 2, 3)

# the mean of x_vector
mean(x_vector)

# calculating the mean by hand
(-1 + 1 + 2 + 3 + 1 + 2 + 3)/7

```

::: {.callout-note collapse="true"}
## Note: Argument Names

Sometimes the functions we use will take multiple arguments, and sometimes they only need one. With all R functions, the arguments are given names. For example, technically the argument name for the function `mean()` is called `x`, which is just a placeholder for any R objects that you can calculate the mean of. If we wanted to be really technical, we could have used the following line of code:

```{webr-r}
# the mean of x_vector
mean(x = x_vector)

```

I try to use argument names in functions that use multiple arguments, because if you don't assign the inputs to specific argument names, R has to assume that you've put the input in a specific order. Sometimes, if I'm only using the most basic argument (like `x` in the `mean()` function), I may forget to or choose not to include the name of the argument to make the code simpler.

If you ever need help figuring out what arguments a certain function in R takes, you can use the 'Help' tab in R Studio (in the bottom right quadrant) or type `?function_name` in your R Console (for example, `?mean`). This will open a documentation page for the function and should include information about the argument names and the types of objects can be used as input for the function.
:::

